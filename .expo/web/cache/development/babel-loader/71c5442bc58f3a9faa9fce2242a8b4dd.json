{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport constants from \"../constants/constants\";\nimport HeaderScreen from \"./HeaderScreen\";\nimport OptionScreen from \"./OptionScreen\";\nimport DB from \"./../fakeDB/db\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar WorkspaceScreen = function WorkspaceScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      database = _useState2[0],\n      setDatabase = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      addingCard = _useState4[0],\n      setAddingCard = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      addingList = _useState6[0],\n      setAddingList = _useState6[1];\n\n  var SELECTED = \"Espace 1\";\n  useEffect(function () {\n    var DBcopy = DB[0];\n    DBcopy.spaces.forEach(function (el) {\n      if (el.name === SELECTED) {\n        setDatabase(el);\n      }\n    });\n    console.log(database);\n  }, []);\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showOptions = _useState8[0],\n      setShowOptions = _useState8[1];\n\n  var optionAnim = useRef(new Animated.Value(0)).current;\n  var addCardAnim = useRef(new Animated.Value(0)).current;\n\n  var optionKickingIn = function optionKickingIn() {\n    Animated.timing(optionAnim, {\n      toValue: 4,\n      duration: 555,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var newCardAnimation = function newCardAnimation() {\n    Animated.timing(addCardAnim, {\n      toValue: 1,\n      duration: 333,\n      useNativeDriver: false\n    }).start();\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: styles.global,\n    children: [addingCard === false && addingList === false ? _jsx(HeaderScreen, {\n      title: SELECTED,\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionKickingIn: optionKickingIn\n    }) : null, addingCard === true ? _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        backgroundColor: constants.blue,\n        height: 60,\n        alignItems: 'center'\n      },\n      children: [_jsx(Pressable, {\n        onPress: function onPress() {\n          return setAddingCard(false);\n        },\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/cancel.png\"),\n          style: styles.png\n        })\n      }), _jsx(Text, {\n        style: {\n          color: \"white\",\n          flex: 1,\n          fontSize: 25,\n          marginLeft: 20,\n          alignSelf: \"center\"\n        },\n        children: \"Ajouter une carte...\"\n      }), _jsx(Pressable, {\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/check.png\"),\n          style: styles.png\n        })\n      })]\n    }) : null, addingList === true ? _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        backgroundColor: constants.blue,\n        height: 60,\n        alignItems: 'center'\n      },\n      children: [_jsx(Pressable, {\n        onPress: function onPress() {\n          return setAddingList(false);\n        },\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/cancel.png\"),\n          style: styles.png\n        })\n      }), _jsx(Text, {\n        style: {\n          color: \"white\",\n          flex: 1,\n          fontSize: 25,\n          marginLeft: 20,\n          alignSelf: \"center\"\n        },\n        children: \"Ajouter une liste...\"\n      }), _jsx(Pressable, {\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/check.png\"),\n          style: styles.png\n        })\n      })]\n    }) : null, _jsx(View, {\n      style: styles.ScrollViewContainer,\n      children: _jsxs(ScrollView, {\n        style: styles.mainBody,\n        horizontal: true,\n        children: [database[\"containers\"] ? database.containers.map(function (cont, idx) {\n          return _jsxs(View, {\n            style: styles.card,\n            children: [_jsxs(View, {\n              style: {\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\"\n              },\n              children: [_jsx(Text, {\n                style: {\n                  marginLeft: 10,\n                  fontSize: 17,\n                  marginTop: 10,\n                  marginBottom: 20\n                },\n                children: cont.title\n              }), _jsx(Image, {\n                source: require(\"./../assets/svg/cancel.png\"),\n                style: {\n                  height: 20,\n                  width: 20,\n                  marginRight: 15\n                }\n              })]\n            }), _jsx(View, {\n              children: cont.cards.map(function (card, cardIdx) {\n                var totalCheckBoxes = 0;\n                var actualCheckedBoxes = 0;\n\n                for (var _iterator = _createForOfIteratorHelperLoose(card.checklist), _step; !(_step = _iterator()).done;) {\n                  var el = _step.value;\n\n                  if (el.done === true) {\n                    totalCheckBoxes++;\n                    actualCheckedBoxes++;\n                  } else {\n                    totalCheckBoxes++;\n                  }\n                }\n\n                return _jsxs(View, {\n                  style: {\n                    backgroundColor: \"white\",\n                    width: \"95%\",\n                    alignSelf: \"center\",\n                    borderRadius: 5,\n                    marginBottom: 5\n                  },\n                  children: [_jsx(Text, {\n                    style: {\n                      marginLeft: 10,\n                      marginTop: 8\n                    },\n                    children: card.cardTitle\n                  }), _jsxs(View, {\n                    style: {\n                      flexDirection: \"row\"\n                    },\n                    children: [_jsx(Image, {\n                      source: require(\"./../assets/svg/check-box.png\"),\n                      style: {\n                        height: 15,\n                        width: 15,\n                        marginLeft: 30\n                      }\n                    }), _jsxs(Text, {\n                      style: {\n                        fontSize: 15,\n                        marginLeft: 15,\n                        marginBottom: 8\n                      },\n                      children: [actualCheckedBoxes, \"/\", totalCheckBoxes]\n                    })]\n                  })]\n                }, cardIdx);\n              })\n            }), _jsx(Pressable, {\n              style: {\n                marginTop: 25,\n                marginBottom: 15\n              },\n              onPress: function onPress() {\n                setAddingCard(!addingCard);\n                newCardAnimation();\n              },\n              children: _jsx(Text, {\n                style: {\n                  marginLeft: 10,\n                  color: \"green\"\n                },\n                children: \"+ Ajouter une carte\"\n              })\n            })]\n          }, idx);\n        }) : null, addingList === false ? _jsx(Pressable, {\n          style: styles.addList,\n          onPress: function onPress() {\n            return setAddingList(true);\n          },\n          children: _jsx(Text, {\n            style: {\n              color: \"green\",\n              fontSize: 25\n            },\n            children: \"Ajouter une liste\"\n          })\n        }) : _jsx(TextInput, {\n          style: styles.addListPlaceholder,\n          placeholder: \"Ajouter une liste\"\n        })]\n      })\n    }), addingCard === true ? _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: \"white\"\n      },\n      children: _jsxs(Animated.View, {\n        style: {\n          opacity: addCardAnim\n        },\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            paddingTop: 15,\n            height: 60,\n            fontSize: 25\n          },\n          children: [_jsx(TextInput, {\n            placeholder: \"Ajouter nouvelle carte...\",\n            style: {\n              color: \"green\",\n              backgroundColor: \"lightgrey\",\n              borderRadius: 5,\n              height: 45,\n              paddingLeft: 10,\n              width: 200,\n              marginRight: 5\n            }\n          }), _jsx(Pressable, {\n            children: _jsx(Image, {\n              source: require(\"./../assets/svg/cancel.png\"),\n              style: {\n                height: 20,\n                width: 20\n              }\n            })\n          })]\n        }), _jsx(Pressable, {\n          style: {\n            alignSelf: \"center\",\n            marginTop: 10,\n            backgroundColor: \"lightgreen\",\n            width: 100,\n            height: 35,\n            borderRadius: 5,\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: _jsx(Text, {\n            children: \"Ajouter\"\n          })\n        })]\n      })\n    }) : _jsx(View, {\n      style: {\n        backgroundColor: \"white\",\n        flex: 1\n      }\n    }), showOptions === true ? _jsx(OptionScreen, {\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionAnim: optionAnim\n    }) : null]\n  });\n};\n\nexport default WorkspaceScreen;\nvar styles = StyleSheet.create({\n  global: {\n    backgroundColor: constants.blue,\n    flex: 1\n  },\n  mainBody: {\n    backgroundColor: \"white\",\n    height: 150\n  },\n  card: {\n    backgroundColor: \"lightgrey\",\n    width: 300,\n    marginLeft: 20,\n    marginRight: 5,\n    marginTop: 15,\n    borderRadius: 5,\n    height: 225\n  },\n  addList: {\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 50,\n    marginTop: 15,\n    width: 200,\n    marginRight: 20,\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: \"lightgrey\",\n    fontSize: 20\n  },\n  addListPlaceholder: {\n    backgroundColor: \"white\",\n    color: \"green\",\n    paddingLeft: 10,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 50,\n    marginTop: 15,\n    width: 200,\n    marginRight: 20,\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: \"lightgrey\",\n    fontSize: 20\n  },\n  ScrollViewContainer: {\n    height: 275\n  },\n  png: {\n    height: constants.iconsSize,\n    width: constants.iconsSize,\n    tintColor: \"white\",\n    marginLeft: 10,\n    marginRight: 10,\n    alignSelf: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/bastien/Desktop/trello-clone-native/screens/WorkspaceScreen.js"],"names":["React","useState","useRef","useEffect","SafeAreaView","constants","HeaderScreen","OptionScreen","DB","WorkspaceScreen","navigation","database","setDatabase","addingCard","setAddingCard","addingList","setAddingList","SELECTED","DBcopy","spaces","forEach","el","name","console","log","showOptions","setShowOptions","optionAnim","Animated","Value","current","addCardAnim","optionKickingIn","timing","toValue","duration","useNativeDriver","start","newCardAnimation","styles","global","flexDirection","backgroundColor","blue","height","alignItems","require","png","color","flex","fontSize","marginLeft","alignSelf","ScrollViewContainer","mainBody","containers","map","cont","idx","card","justifyContent","marginTop","marginBottom","title","width","marginRight","cards","cardIdx","totalCheckBoxes","actualCheckedBoxes","checklist","done","borderRadius","cardTitle","addList","addListPlaceholder","opacity","paddingTop","paddingLeft","StyleSheet","create","borderWidth","borderColor","iconsSize","tintColor"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { StyleSheet, Text, View, Image, TextInput, Pressable, Animated, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport constants from '../constants/constants';\nimport HeaderScreen from './HeaderScreen';\nimport OptionScreen from './OptionScreen';\n\nimport DB from './../fakeDB/db';\n\nconst WorkspaceScreen = ({ navigation }) => {\n\n    const [database, setDatabase] = useState({});\n    const [addingCard, setAddingCard] = useState(false);\n    const [addingList, setAddingList] = useState(false);\n\n    let SELECTED = \"Espace 1\" // to change that shit please !!!\n\n    useEffect(() => {\n        const DBcopy = DB[0];\n        DBcopy.spaces.forEach(el => {\n            if (el.name === SELECTED) {\n                setDatabase(el);\n            }\n        })\n        console.log(database)\n    }, [])\n\n\n    const [showOptions, setShowOptions] = useState(false);\n\n    const optionAnim = useRef(new Animated.Value(0)).current;\n    const addCardAnim = useRef(new Animated.Value(0)).current;\n\n    const optionKickingIn = () => {\n        Animated.timing(optionAnim, {\n            toValue : 4,\n            duration: 555,\n            useNativeDriver: false\n        }).start();\n    }\n\n    const newCardAnimation = () => {\n        Animated.timing(addCardAnim, {\n            toValue: 1,\n            duration: 333,\n            useNativeDriver: false\n        }).start();\n    }\n\n    return (\n        <SafeAreaView style={styles.global}>\n            {\n                (addingCard === false && addingList === false) ? \n                <HeaderScreen \n                title={SELECTED} \n                showOptions={showOptions} \n                setShowOptions={setShowOptions}\n                optionKickingIn={optionKickingIn}/> : null\n            }\n\n            {\n                addingCard === true ? \n                // Adding card header\n                <View style={{\n                    flexDirection: 'row',\n                    backgroundColor: constants.blue,\n                    height: 60,\n                    alignItems: 'center',\n                }}>\n                    <Pressable\n                        onPress={() => setAddingCard(false)}\n                    >\n                        <Image source={require('./../assets/svg/cancel.png')} style={styles.png}/>\n                    </Pressable>\n\n                    <Text style={{\n                        color: \"white\",\n                        flex: 1,\n                        fontSize: 25,\n                        marginLeft: 20,\n                        alignSelf: \"center\"\n                    }}>Ajouter une carte...</Text>\n\n                    <Pressable>\n                    <Image source={require('./../assets/svg/check.png')} style={styles.png}/>\n                    </Pressable>\n                </View> : null\n            }\n\n            {\n                addingList === true ? \n                // Adding list header\n                <View style={{\n                    flexDirection: 'row',\n                    backgroundColor: constants.blue,\n                    height: 60,\n                    alignItems: 'center',\n                }}>\n                    <Pressable\n                        onPress={() => setAddingList(false)}>\n                        <Image source={require('./../assets/svg/cancel.png')} style={styles.png}/>\n                    </Pressable>\n\n                    <Text style={{\n                        color: \"white\",\n                        flex: 1,\n                        fontSize: 25,\n                        marginLeft: 20,\n                        alignSelf: \"center\"\n                    }}>Ajouter une liste...</Text>\n\n                    <Pressable>\n                    <Image source={require('./../assets/svg/check.png')} style={styles.png}/>\n                    </Pressable>\n                </View> : null\n            }\n            <View style={styles.ScrollViewContainer}>\n            <ScrollView style={styles.mainBody} horizontal={true}>\n                {\n                    database[\"containers\"] ? \n                    \n                    database.containers.map((cont, idx) => {\n                        return(\n                            <View style={styles.card} key={idx}>\n                                <View style={{flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\"}}>\n                                    <Text\n                                        style={{\n                                            marginLeft: 10,\n                                            fontSize: 17,\n                                            marginTop: 10,\n                                            marginBottom: 20\n                                        }}\n                                    >{cont.title}</Text>\n                                    <Image source={require('./../assets/svg/cancel.png')} style={{height: 20, width: 20, marginRight: 15}}/>\n                                </View>\n                                \n                                <View>\n                                    {\n                                        cont.cards.map((card, cardIdx) => {\n                                            let totalCheckBoxes = 0;\n                                            let actualCheckedBoxes = 0;\n\n                                            for (let el of card.checklist) {\n                                                if (el.done === true) {\n                                                    totalCheckBoxes ++;\n                                                    actualCheckedBoxes ++;\n                                                } else {\n                                                    totalCheckBoxes ++;\n                                                }\n                                            }\n                                            return(\n                                                <View \n                                                    key={cardIdx}\n                                                    style={{\n                                                        backgroundColor: \"white\",\n                                                        width: \"95%\",\n                                                        alignSelf: \"center\",\n                                                        borderRadius: 5,\n                                                        marginBottom: 5\n                                                    }}>\n                                                    <Text style={{marginLeft: 10, marginTop: 8}}>{card.cardTitle}</Text>\n                                                    <View style={{\n                                                        flexDirection: \"row\"\n                                                    }}>\n                                                        <Image \n                                                            source={require('./../assets/svg/check-box.png')}\n                                                            style={{\n                                                                height: 15, width: 15, marginLeft: 30\n                                                            }}/>\n                                                        <Text style={{fontSize: 15, marginLeft: 15, marginBottom: 8}}>{actualCheckedBoxes}/{totalCheckBoxes}</Text>\n                                                    </View>\n                                                    \n                                                </View>\n                                                )\n                                        })\n                                    }\n                                </View>\n                                <Pressable \n                                    style={{\n                                        marginTop: 25,\n                                        marginBottom: 15\n                                    }}\n                                    onPress={() => {\n                                        setAddingCard(!addingCard)\n                                        newCardAnimation();\n                                    }}>\n                                    <Text style={{\n                                        marginLeft: 10,\n                                        color: \"green\"\n                                    }}>+ Ajouter une carte</Text>\n                                </Pressable>\n\n                            </View>\n                            )\n                    })\n\n                    : null\n                }\n\n                {\n                    addingList === false ? \n\n                    <Pressable \n                        style={styles.addList}\n                        onPress={() => setAddingList(true)}\n                        >\n                        <Text style={{color: \"green\", fontSize: 25}}>Ajouter une liste</Text>\n                    </Pressable> :\n\n                    <TextInput \n                        style={styles.addListPlaceholder}\n                        placeholder=\"Ajouter une liste\"\n                    />\n\n\n\n                }\n\n                \n            </ScrollView>\n            </View>\n\n            {addingCard === true ?\n\n            <View style={{\n                flex: 1,\n                backgroundColor: \"white\",\n            }}>\n                <Animated.View style={{\n                    opacity: addCardAnim,\n                }}>\n                    <View style={{\n                        flexDirection: \"row\", \n                        justifyContent: \"center\", \n                        alignItems: \"center\",\n                        paddingTop: 15,\n                        height: 60,\n                        fontSize: 25,\n                        }}>\n                        <TextInput \n                            placeholder=\"Ajouter nouvelle carte...\"\n                            style={{\n                                color: \"green\",\n                                backgroundColor: \"lightgrey\",\n                                borderRadius: 5,\n                                height: 45,\n                                paddingLeft: 10,\n                                width: 200,\n                                marginRight: 5,\n                            }}\n                        />\n                        <Pressable>\n                            <Image \n                                source={require('./../assets/svg/cancel.png')} \n                                style={{height: 20, width: 20}}/>\n                        </Pressable>\n                    </View>\n                    \n                    <Pressable style={{\n                        alignSelf: \"center\",\n                        marginTop: 10,\n                        backgroundColor: \"lightgreen\",\n                        width: 100,\n                        height: 35,\n                        borderRadius: 5,\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                    }}>\n                        <Text>Ajouter</Text>\n                    </Pressable>\n                </Animated.View>\n            </View>\n            \n            \n\n            : \n            \n            <View style={{backgroundColor: \"white\", flex:1}}></View>}\n\n\n\n            { showOptions === true ? \n                <OptionScreen \n                    showOptions={showOptions} \n                    setShowOptions={setShowOptions}\n                    optionAnim={optionAnim}\n                    /> : null }\n            \n        </SafeAreaView>\n    )\n}\n\nexport default WorkspaceScreen;\n\nconst styles = StyleSheet.create({\n    global: {\n        backgroundColor: constants.blue,\n        flex: 1,\n    },\n\n    mainBody: {\n\n        backgroundColor: \"white\",\n        height: 150\n    },\n\n    card: {\n        backgroundColor: \"lightgrey\",\n        width: 300,\n        marginLeft: 20,\n        marginRight: 5,\n        marginTop: 15,\n        borderRadius: 5,\n        height: 225\n    },\n\n    addList: {\n        backgroundColor: \"white\", \n        alignItems: \"center\", \n        justifyContent: \"center\", \n        height: 50, \n        marginTop: 15, \n        width: 200,\n        marginRight: 20,\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: \"lightgrey\",\n        fontSize: 20\n    },\n\n    addListPlaceholder: {\n        backgroundColor: \"white\", \n        color: \"green\",\n        paddingLeft: 10,\n        alignItems: \"center\", \n        justifyContent: \"center\", \n        height: 50, \n        marginTop: 15, \n        width: 200,\n        marginRight: 20,\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: \"lightgrey\",\n        fontSize: 20\n    },\n\n    ScrollViewContainer: {\n        height: 275\n    },\n\n    png: {\n        height: constants.iconsSize,\n        width: constants.iconsSize,\n        tintColor: \"white\",\n        marginLeft: 10,\n        marginRight: 10,\n        alignSelf: \"center\"\n    },\n})\n"]},"metadata":{},"sourceType":"module"}