{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { CheckBox } from '@react-native-community/checkbox';\nimport constants from \"../constants/constants\";\nimport HeaderScreen from \"./HeaderScreen\";\nimport OptionScreen from \"./OptionScreen\";\nimport DB from \"./../fakeDB/db\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar card = {\n  cardTitle: \"truc cool\",\n  text: \"sdkjfhskdfjhsdkfjhsdkfjhsdfjdsfh\",\n  members: [],\n  startDate: \"\",\n  endDate: \"\",\n  checklist: [{\n    title: \"truc à faire 1\",\n    done: false\n  }, {\n    title: \"truc à faire 2\",\n    done: true\n  }]\n};\n\nvar WorkspaceScreen = function WorkspaceScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(card),\n      _useState2 = _slicedToArray(_useState, 2),\n      database = _useState2[0],\n      setDatabase = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      writingText = _useState4[0],\n      setWritingText = _useState4[1];\n\n  var _useState5 = useState(\"sdfjkhsdkfjhdsk jdfkjh kfdjhkdj hfdkfjhdfkjdhfkjh fdkjhfdkjhfdkjhf\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      textDB = _useState6[0],\n      setTextDB = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentWritingText = _useState8[0],\n      setCurrentWritingText = _useState8[1];\n\n  var SELECTED = \"Espace 1\";\n  return _jsxs(SafeAreaView, {\n    style: styles.global,\n    children: [writingText === false ? _jsxs(View, {\n      style: {\n        height: 65,\n        backgroundColor: \"lightgrey\",\n        flexDirection: \"row\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(Pressable, {\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/cancel.png\"),\n          style: styles.png\n        })\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Scraping\"\n      })]\n    }) : _jsxs(View, {\n      style: {\n        height: 65,\n        backgroundColor: \"white\",\n        flexDirection: \"row\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(Pressable, {\n        onPress: function onPress() {\n          setCurrentWritingText(\"\");\n          setWritingText(false);\n        },\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/cancel.png\"),\n          style: styles.png\n        })\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Modifier la description\"\n      }), _jsx(Pressable, {\n        onPress: function onPress() {\n          setTextDB(currentWritingText);\n          setWritingText(false);\n        },\n        children: _jsx(Image, {\n          source: require(\"./../assets/svg/check.png\"),\n          style: _objectSpread(_objectSpread({}, styles.png), {}, {\n            tintColor: \"green\"\n          })\n        })\n      })]\n    }), _jsx(Text, {\n      style: styles.subtitle,\n      children: \"Foot dans la liste choses \\xE0 faire\"\n    }), _jsx(View, {\n      style: styles.textAreaContainer,\n      children: writingText === false ? _jsx(Pressable, {\n        onPress: function onPress() {\n          setWritingText(true);\n        },\n        children: _jsx(Text, {\n          style: styles.textArea,\n          children: textDB\n        })\n      }) : _jsx(TextInput, {\n        placeholder: \"placeholder\",\n        defaultValue: textDB,\n        onChangeText: function onChangeText(t) {\n          setCurrentWritingText(t);\n        }\n      })\n    }), _jsxs(View, {\n      style: styles.checklistHeader,\n      children: [_jsx(Image, {\n        source: require(\"./../assets/svg/check-box.png\"),\n        style: styles.png\n      }), _jsx(Text, {\n        style: {\n          fontSize: 17,\n          marginLeft: 5\n        },\n        children: \"CHECKLISTS\"\n      })]\n    }), _jsx(View, {\n      children: database !== {} ? database.checklist.map(function (el, idx) {\n        return _jsxs(View, {\n          style: styles.checklistElement,\n          children: [_jsx(CheckBox, {\n            disabled: false\n          }), _jsx(Text, {\n            children: \"coucou\"\n          })]\n        }, idx);\n      }) : null\n    })]\n  });\n};\n\nexport default WorkspaceScreen;\nvar styles = StyleSheet.create({\n  global: {\n    backgroundColor: \"white\",\n    flex: 1\n  },\n  png: {\n    height: constants.iconsSize,\n    width: constants.iconsSize,\n    tintColor: \"black\",\n    marginLeft: 15,\n    marginRight: 10\n  },\n  title: {\n    fontSize: 25,\n    marginLeft: 20\n  },\n  subtitle: {\n    fontSize: 18,\n    marginLeft: 20,\n    marginTop: 15,\n    marginBottom: 15\n  },\n  textAreaContainer: {\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"lightgrey\",\n    paddingTop: 10,\n    paddingBottom: 10\n  },\n  textArea: {\n    width: 350\n  },\n  checklistHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 65,\n    backgroundColor: \"lightgrey\"\n  },\n  checklistElement: {\n    flexDirection: \"row\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"lightgrey\",\n    height: 50,\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/bastien/Desktop/trello-clone-native/screens/CardScreen.js"],"names":["React","useState","useRef","useEffect","SafeAreaView","CheckBox","constants","HeaderScreen","OptionScreen","DB","card","cardTitle","text","members","startDate","endDate","checklist","title","done","WorkspaceScreen","navigation","database","setDatabase","writingText","setWritingText","textDB","setTextDB","currentWritingText","setCurrentWritingText","SELECTED","styles","global","height","backgroundColor","flexDirection","alignItems","require","png","tintColor","subtitle","textAreaContainer","textArea","t","checklistHeader","fontSize","marginLeft","map","el","idx","checklistElement","StyleSheet","create","flex","iconsSize","width","marginRight","marginTop","marginBottom","borderWidth","borderColor","paddingTop","paddingBottom","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { StyleSheet, Text, View, Image, TextInput, Pressable, Animated, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport {CheckBox} from '@react-native-community/checkbox';\n\nimport constants from '../constants/constants';\n\nimport HeaderScreen from './HeaderScreen';\nimport OptionScreen from './OptionScreen';\n\nimport DB from './../fakeDB/db';\nconst card = {\n        cardTitle: \"truc cool\",\n        text: \"sdkjfhskdfjhsdkfjhsdkfjhsdfjdsfh\",\n        members: [],\n        startDate: \"\",\n        endDate: \"\",\n        checklist: [\n            {\n                title: \"truc à faire 1\",\n                done: false\n            },\n            {\n                title: \"truc à faire 2\",\n                done: true\n            }\n        ]\n    }\n\nconst WorkspaceScreen = ({ navigation }) => {\n\n    const [database, setDatabase] = useState(card);\n    const [writingText, setWritingText] = useState(false);\n\n    let [textDB, setTextDB] = useState(\"sdfjkhsdkfjhdsk jdfkjh kfdjhkdj hfdkfjhdfkjdhfkjh fdkjhfdkjhfdkjhf\");\n    const [currentWritingText, setCurrentWritingText] = useState(\"\");\n    let SELECTED = \"Espace 1\" // to change that shit please !!!\n\n    // useEffect(() => {\n    //     const DBcopy = DB[0];\n    //     DBcopy.spaces.forEach(el => {\n    //         if (el.name === SELECTED) {\n    //             setDatabase(el);\n    //         }\n    //     })\n\n    //     console.log(\"--------\");\n    //     (database!=={}) ? \n    //     console.log(database.containers[0].cards[0].checklist) : null // OMG change that shit !!!\n    //     // console.log(database); // OMG change that shit !!!\n\n        \n    // }, [])\n\n    \n\n\n\n    return (\n        <SafeAreaView style={styles.global}>\n            {\n                writingText === false ?\n\n                <View style={{\n                        height: 65,\n                        backgroundColor: \"lightgrey\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\"\n                    }}>\n                    <Pressable>\n                        <Image source={require('./../assets/svg/cancel.png')} style={styles.png} />\n                    </Pressable>\n                    <Text style={styles.title}>Scraping</Text>\n                </View>\n\n                :\n\n                <View style={{\n                    height: 65,\n                    backgroundColor: \"white\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\"\n                }}>\n                <Pressable\n                    onPress={() => {\n                        setCurrentWritingText(\"\");\n                        setWritingText(false);\n                    }}>\n                    <Image source={require('./../assets/svg/cancel.png')} style={styles.png} />\n                </Pressable>\n                <Text style={styles.title}>Modifier la description</Text>\n                <Pressable\n                    onPress={() => {\n                        setTextDB(currentWritingText);\n                        setWritingText(false);\n                    }}>\n                    <Image source={require('./../assets/svg/check.png')} style={{...styles.png, tintColor: \"green\"}} />\n                </Pressable>\n            </View>\n\n\n\n            }\n            \n\n            <Text style={styles.subtitle}>Foot dans la liste choses à faire</Text>\n\n            <View style={styles.textAreaContainer}>\n                {\n                    writingText === false ?\n                    <Pressable\n                        onPress={() => {\n                            setWritingText(true);\n                        }}>\n                        <Text style={styles.textArea}>{textDB}</Text>\n                    </Pressable>\n                    \n                    : \n\n                    <TextInput \n                        placeholder=\"placeholder\"\n                        defaultValue={textDB}\n                        onChangeText={t => {\n                            setCurrentWritingText(t);\n                        }}\n                    />\n                }\n            </View>\n\n            <View style={styles.checklistHeader}>\n                <Image source={require('./../assets/svg/check-box.png')} style={styles.png}/>\n                <Text style={{fontSize: 17, marginLeft: 5}}>CHECKLISTS</Text>\n            </View>\n\n            <View>\n                {\n                    // Holding all the checklist elements here\n                    (database!=={}) ?\n\n                    database.checklist.map((el, idx) => {\n                        return(\n                            <View\n                                key={idx}\n                                style={styles.checklistElement}>\n                                    <CheckBox\n                                        disabled={false}\n                                    />\n                                    <Text>coucou</Text>\n\n                            </View>\n                        )\n                    })\n\n                    : null\n\n                }\n\n            </View>\n\n\n            \n        </SafeAreaView>\n    )\n}\n\nexport default WorkspaceScreen;\n\nconst styles = StyleSheet.create({\n    global: {\n        backgroundColor: \"white\",\n        flex: 1,\n    },\n\n    png: {\n        height: constants.iconsSize,\n        width: constants.iconsSize,\n        tintColor: \"black\",\n        marginLeft: 15,\n        marginRight: 10,\n        // alignSelf: \"flex-start\"\n    },\n\n    title: {\n        fontSize: 25,\n        marginLeft: 20\n    },\n\n    subtitle: {\n        fontSize: 18,\n        marginLeft: 20,\n        marginTop: 15,\n        marginBottom: 15\n    },\n\n    textAreaContainer: {\n        alignItems: \"center\",\n        borderWidth: 1,\n        borderColor: \"lightgrey\",\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n\n    textArea: {\n        width: 350,\n    },\n\n    checklistHeader: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        height: 65,\n        backgroundColor: \"lightgrey\"\n    },\n\n    checklistElement: {\n        flexDirection: \"row\",\n        borderBottomWidth: 1,\n        borderBottomColor: \"lightgrey\",\n        height: 50,\n        alignItems: \"center\"\n    }\n})\n"]},"metadata":{},"sourceType":"module"}