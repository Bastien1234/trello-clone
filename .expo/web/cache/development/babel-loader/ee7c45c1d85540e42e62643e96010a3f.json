{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT;AACA,SAASC,KAAT;AACA,SAASC,UAAT;AASA,IAAMC,cAAc,GAAGD,UAAU,CAC/B,kFAD+B,CAAjC;AAIA,OAAO,IAAME,mBAAmB,GAAG;EACjCC,MADiC,kBAC1BC,UAD0B,EACmB;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAIP,UAAJ,EAAgB;UACdA,UAAU,CAACQ,eAAXR,CAA2BM,UAA3BN,EAAuCC,KAAK,CAACQ,KAA7CT;QADF,OAEO;UACLU,OAAO,CAACC,IAARD,CAAaP,cAAbO;QACD;MAPE;MAULE,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAIZ,UAAJ,EAAgB;UACdA,UAAU,CAACQ,eAAXR,CAA2BM,UAA3BN,EAAuCC,KAAK,CAACY,MAA7Cb;QADF,OAEO;UACLU,OAAO,CAACC,IAARD,CAAaP,cAAbO;QACD;MAhBE;MAmBLI,IAAI,EAAE,gBAAM;QACV;;QACA,IAAId,UAAJ,EAAgB;UACdA,UAAU,CAACQ,eAAXR,CAA2BM,UAA3BN,EAAuCC,KAAK,CAACc,MAA7Cf;QADF,OAEO;UACLU,OAAO,CAACC,IAARD,CAAaP,cAAbO;QACD;MAzBE;MA4BLM,GAAG,EAAE,eAAM;QACT;;QACA,IAAIhB,UAAJ,EAAgB;UACdA,UAAU,CAACQ,eAAXR,CAA2BM,UAA3BN,EAAuCC,KAAK,CAACgB,GAA7CjB;QADF,OAEO;UACLU,OAAO,CAACC,IAARD,CAAaP,cAAbO;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","names":["Reanimated","State","tagMessage","warningMessage","GestureStateManager","create","handlerTag","begin","setGestureState","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}