{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport HeaderScreen from \"./HeaderScreen\";\nimport OptionScreen from \"./OptionScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LogScreen = function LogScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      setShowOptions = _useState2[1];\n\n  var optionAnim = useRef(new Animated.Value(0)).current;\n\n  var optionKickingIn = function optionKickingIn() {\n    Animated.timing(optionAnim, {\n      toValue: 4,\n      duration: 888,\n      useNativeDriver: false\n    }).start();\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: styles.global,\n    children: [_jsx(HeaderScreen, {\n      title: \"nik\",\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionKickingIn: optionKickingIn\n    }), _jsx(View, {\n      style: styles.mainBody,\n      children: _jsx(Text, {\n        children: \"Coucou\"\n      })\n    }), showOptions === true ? _jsx(OptionScreen, {\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionAnim: optionAnim\n    }) : null]\n  });\n};\n\nexport default LogScreen;\nvar styles = StyleSheet.create({\n  global: {\n    backgroundColor: \"rgb(235, 235, 235)\",\n    flex: 1\n  },\n  mainBody: {\n    flex: 1,\n    backgroundColor: \"grey\"\n  }\n});","map":{"version":3,"sources":["/Users/bastien/Desktop/trello-clone/screens/LogScreen.js"],"names":["React","useState","useRef","SafeAreaView","HeaderScreen","OptionScreen","LogScreen","navigation","showOptions","setShowOptions","optionAnim","Animated","Value","current","optionKickingIn","timing","toValue","duration","useNativeDriver","start","styles","global","mainBody","StyleSheet","create","backgroundColor","flex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;;;;;;;;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,YAAP;AACA,OAAOC,YAAP;;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAElC,kBAAsCN,QAAQ,CAAC,KAAD,CAA9C;AAAA;AAAA,MAAOO,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,UAAU,GAAGR,MAAM,CAAC,IAAIS,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAjD;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BH,IAAAA,QAAQ,CAACI,MAAT,CAAgBL,UAAhB,EAA4B;AACxBM,MAAAA,OAAO,EAAG,CADc;AAExBC,MAAAA,QAAQ,EAAE,GAFc;AAGxBC,MAAAA,eAAe,EAAE;AAHO,KAA5B,EAIGC,KAJH;AAKH,GAND;;AAQA,SACI,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEC,MAAM,CAACC,MAA5B;AAAA,eACI,KAAC,YAAD;AACI,MAAA,KAAK,EAAE,KADX;AAEI,MAAA,WAAW,EAAEb,WAFjB;AAGI,MAAA,cAAc,EAAEC,cAHpB;AAII,MAAA,eAAe,EAAEK;AAJrB,MADJ,EAMI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEM,MAAM,CAACE,QAApB;AAAA,gBACI,KAAC,IAAD;AAAA;AAAA;AADJ,MANJ,EAUMd,WAAW,KAAK,IAAhB,GACE,KAAC,YAAD;AACI,MAAA,WAAW,EAAEA,WADjB;AAEI,MAAA,cAAc,EAAEC,cAFpB;AAGI,MAAA,UAAU,EAAEC;AAHhB,MADF,GAKW,IAfjB;AAAA,IADJ;AAoBH,CAlCD;;AAoCA,eAAeJ,SAAf;AAEA,IAAMc,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,MAAM,EAAE;AACJI,IAAAA,eAAe,EAAE,oBADb;AAEJC,IAAAA,IAAI,EAAE;AAFF,GADqB;AAM7BJ,EAAAA,QAAQ,EAAE;AACNI,IAAAA,IAAI,EAAE,CADA;AAEND,IAAAA,eAAe,EAAE;AAFX;AANmB,CAAlB,CAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { StyleSheet, Text, View, Image, TextInput, Pressable, Animated } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport HeaderScreen from './HeaderScreen';\nimport OptionScreen from './OptionScreen';\n\nconst LogScreen = ({ navigation }) => {\n\n    const [showOptions, setShowOptions] = useState(false);\n\n    const optionAnim = useRef(new Animated.Value(0)).current;\n\n    const optionKickingIn = () => {\n        Animated.timing(optionAnim, {\n            toValue : 4,\n            duration: 888,\n            useNativeDriver: false\n        }).start();\n    }\n\n    return (\n        <SafeAreaView style={styles.global}>\n            <HeaderScreen \n                title={\"nik\"} \n                showOptions={showOptions} \n                setShowOptions={setShowOptions}\n                optionKickingIn={optionKickingIn}/>\n            <View style={styles.mainBody}>\n                <Text>Coucou</Text>\n            </View>\n\n            { showOptions === true ? \n                <OptionScreen \n                    showOptions={showOptions} \n                    setShowOptions={setShowOptions}\n                    optionAnim={optionAnim}\n                    /> : null }\n            \n        </SafeAreaView>\n    )\n}\n\nexport default LogScreen;\n\nconst styles = StyleSheet.create({\n    global: {\n        backgroundColor: \"rgb(235, 235, 235)\",\n        flex: 1\n    },\n\n    mainBody: {\n        flex: 1,\n        backgroundColor: \"grey\"\n    }\n})\n"]},"metadata":{},"sourceType":"module"}