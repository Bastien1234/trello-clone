{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport constants from \"../constants/constants\";\nimport HeaderScreen from \"./HeaderScreen\";\nimport OptionScreen from \"./OptionScreen\";\nimport DB from \"./../fakeDB/db\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LogScreen = function LogScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      setShowOptions = _useState2[1];\n\n  var optionAnim = useRef(new Animated.Value(0)).current;\n\n  var optionKickingIn = function optionKickingIn() {\n    Animated.timing(optionAnim, {\n      toValue: 4,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: styles.global,\n    children: [_jsx(HeaderScreen, {\n      title: \"Tableaux\",\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionKickingIn: optionKickingIn\n    }), _jsxs(View, {\n      style: styles.mainBody,\n      children: [_jsx(Text, {\n        style: styles.subTitle,\n        children: \"Espace de travail Trello\"\n      }), DB.map(function (el, idx) {\n        return _jsxs(Pressable, {\n          style: styles.workspace,\n          children: [_jsx(Image, {\n            style: styles.workspaceImage,\n            source: require(\"./../assets/images/motocross.jpg\")\n          }), _jsx(Text, {\n            style: styles.workspaceText,\n            children: el.name\n          })]\n        }, idx);\n      })]\n    }), showOptions === true ? _jsx(OptionScreen, {\n      showOptions: showOptions,\n      setShowOptions: setShowOptions,\n      optionAnim: optionAnim\n    }) : null]\n  });\n};\n\nexport default LogScreen;\nvar styles = StyleSheet.create({\n  global: {\n    backgroundColor: constants.blue,\n    flex: 1\n  },\n  mainBody: {\n    flex: 1,\n    backgroundColor: \"white\"\n  },\n  subTitle: {\n    fontSize: 16,\n    marginTop: 12,\n    marginBottom: 12,\n    marginLeft: 15\n  },\n  workspace: {\n    flexDirection: \"row\",\n    backgroundColor: \"lightgrey\",\n    marginBottom: 10,\n    height: 65,\n    alignItems: \"center\",\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderTopColor: \"grey\",\n    borderBottomColor: \"grey\"\n  },\n  workspaceImage: {\n    height: 50,\n    width: 50,\n    marginLeft: 15,\n    borderRadius: 5\n  },\n  workspaceText: {\n    marginLeft: 15,\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/Users/bastien/Desktop/trello-clone-native/screens/TableauxScreen.js"],"names":["React","useState","useRef","SafeAreaView","constants","HeaderScreen","OptionScreen","DB","LogScreen","navigation","showOptions","setShowOptions","optionAnim","Animated","Value","current","optionKickingIn","timing","toValue","duration","useNativeDriver","start","styles","global","mainBody","subTitle","map","el","idx","workspace","workspaceImage","require","workspaceText","name","StyleSheet","create","backgroundColor","blue","flex","fontSize","marginTop","marginBottom","marginLeft","flexDirection","height","alignItems","borderTopWidth","borderBottomWidth","borderTopColor","borderBottomColor","width","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { StyleSheet, Text, View, Image, TextInput, Pressable, Animated } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport constants from '../constants/constants';\nimport HeaderScreen from './HeaderScreen';\nimport OptionScreen from './OptionScreen';\n\nimport DB from './../fakeDB/db';\n\nconst LogScreen = ({ navigation }) => {\n\n    const [showOptions, setShowOptions] = useState(false);\n\n    const optionAnim = useRef(new Animated.Value(0)).current;\n\n    const optionKickingIn = () => {\n        Animated.timing(optionAnim, {\n            toValue : 4,\n            duration: 1000,\n            useNativeDriver: false\n        }).start();\n    }\n\n    return (\n        <SafeAreaView style={styles.global}>\n            <HeaderScreen \n                title={\"Tableaux\"} \n                showOptions={showOptions} \n                setShowOptions={setShowOptions}\n                optionKickingIn={optionKickingIn}/>\n            <View style={styles.mainBody}>\n                <Text style={styles.subTitle}>Espace de travail Trello</Text>\n                {\n                    // Populate from DB\n\n                    DB.map((el, idx) => {\n                        return(\n                                <Pressable style={styles.workspace} key={idx}>\n                                    <Image \n                                        style={styles.workspaceImage}\n                                        source={require(\"./../assets/images/motocross.jpg\")} />\n                                    <Text style={styles.workspaceText}>{el.name}</Text>\n                                </Pressable>\n                            )\n                    })\n                }\n            </View>\n\n            { showOptions === true ? \n                <OptionScreen \n                    showOptions={showOptions} \n                    setShowOptions={setShowOptions}\n                    optionAnim={optionAnim}\n                    /> : null }\n            \n        </SafeAreaView>\n    )\n}\n\nexport default LogScreen;\n\nconst styles = StyleSheet.create({\n    global: {\n        backgroundColor: constants.blue,\n        flex: 1\n    },\n\n    mainBody: {\n        flex: 1,\n        backgroundColor: \"white\"\n    },\n\n    subTitle: {\n        fontSize: 16,\n        marginTop: 12,\n        marginBottom: 12,\n        marginLeft: 15\n    },\n\n    workspace: {\n        flexDirection: \"row\",\n        backgroundColor: \"lightgrey\",\n        marginBottom: 10,\n        height: 65,\n        alignItems: \"center\",\n        borderTopWidth: 1,\n        borderBottomWidth: 1,\n        borderTopColor: \"grey\",\n        borderBottomColor: \"grey\",\n    },\n\n    workspaceImage: {\n        height: 50,\n        width: 50,\n        marginLeft: 15,\n        borderRadius: 5\n    },\n\n    workspaceText: {\n        marginLeft: 15,\n        fontSize: 20\n    }\n})\n"]},"metadata":{},"sourceType":"module"}